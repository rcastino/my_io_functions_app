# Azure DevOps pipeline to build, check source codes, run tests, and deploy.
#
# To make Danger JS run on a pull request you need to add the following pipeline 
# variable and set it with a GitHub access token (scope public_repo); otherwise 
# set its value to 'skip' without marking it secret: 
# - DANGER_GITHUB_API_TOKEN
#
# Optionally, it is possible to create and publish a new release to GitHub by
# incrementing the package version, creating a corresponding versioning tag and
# updating the changelog. To enable the creation of the release you need to 
# set the following parameters: 
# - PUBLISH_RELEASE: true (false by default)
# - PACKAGE_INCREMENT_VERSION: major | minor | patch (default)
#
# To enable the deployment in any environment you need to configure the following 
# global variable otherwise all the deployment jobs will be always skipped:
# - DO_DEPLOY = true
# For manual run only, you also need to set the following additional parameters  
# based on the environment(s) to update when running the pipeline:
# - PRODUCTION_ENABLE_DEPLOY: true
# - TEST_ENABLE_DEPLOY: true
#
# The following parameters and variables are used to configure the settings for
# connecting to the environment to deploy and managing the deploymentÂ methods:
# - PRODUCTION_DEPLOY_TYPE:
#     -- 'deployToStagingSlot' (default)
#     -- 'deployToProductionSlot'
#     -- 'deployToStagingSlotAndSwap'
# - PRODUCTION_AZURE_SUBSCRIPTION
# - PRODUCTION_RESOURCE_GROUP_NAME
# - PRODUCTION_FUNCTION_APP_NAME
#
# - TEST_DEPLOY_TYPE:
#      -- 'deployToTestSlot' (default)
#      -- 'deployToProductionSlot'
# - TEST_AZURE_SUBSCRIPTION
# - TEST_RESOURCE_GROUP_NAME
# - TEST_FUNCTION_APP_NAME
# 
# Please note that the deployment to a slot (e.g. 'staging') could automatically
# trigger the swapping with 'production' slot if "auto swap" has been enabled in
# the App service configuration. This also means that if the "auto swap" is on and 
# you select 'deployToStagingSlotAndSwap' to swap 'staging' and 'production' slots
# after deploying to 'staging', the swap task in this pipeline will probably fail
# because conflicting with another (automatic) swap operation in progress.
# 

parameters:
  - name: 'PUBLISH_RELEASE'
    displayName: 'Publish new release'
    type: boolean
    default: false

  - name: 'PACKAGE_INCREMENT_VERSION'
    displayName: 'increment package versioning (if publishing release):'
    type: string
    default: patch
    values:
      - major
      - minor
      - patch
      - pre*

  - name: 'TEST_ENABLE_DEPLOY'
    displayName: 'Deploy in TEST environment'
    type: boolean
    default: false

  - name: 'TEST_DEPLOY_TYPE'
    displayName: 'Method to achieve deployment in Test (if enabled):'
    type: string
    default: deployToTestSlot
    values:
      - deployToTestSlot  
      - deployToProductionSlot

  - name: 'PRODUCTION_ENABLE_DEPLOY'
    displayName: 'Deploy in PRODUCTION environment'
    type: boolean
    default: false

  - name: 'PRODUCTION_DEPLOY_TYPE'
    displayName: 'Method to achieve deployment in Production (if enabled):'
    type: string
    default: deployToStagingSlot
    values:
      - deployToStagingSlot  
      - deployToProductionSlot
      - deployToStagingSlotAndSwap


variables:
  - name: NODE_VERSION
    value: '10.14.2'
  - name: YARN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.yarn

  - name: DO_MANUAL_PUBLISH_RELEASE
    value: ${{ parameters.PUBLISH_RELEASE }}  
  - name: DO_MANUAL_TEST_DEPLOY
    value: ${{ parameters.TEST_ENABLE_DEPLOY }}
  - name: DO_MANUAL_PRODUCTION_DEPLOY
    value: ${{ parameters.PRODUCTION_ENABLE_DEPLOY }}

  #- group: RaiVars 
  #- template: azure-templates/config-variables.yml

resources:
  repositories:
  - repository: MyGitHubRepo
    type: github
    name: rcastino/my_io_functions_app
    endpoint: GITHUB_SERVICE_CONN

# This pipeline can be manually run or is automatically triggered whenever one 
# of the following event occurs:
# - a push is made to any branch ('master' could be excluded in pipeline filters)
# - a pull request is created
# - a tag named 'latest' is pushed
# Note. In the last case, the tag can be (re-)created using the Git CLI, e.g.:
#    git push -f origin <abfb967>:refs/tags/latest
trigger:
  branches:
    include:
      - '*'
      - refs/tags/latest


# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are deploying on Azure functions on Windows
# runtime, the pipeline is currently configured to use a Windows hosted image for
# the build and deploy.
pool:
  vmImage: 'ubuntu-latest'

stages:

  - stage: Raimondo

    dependsOn: []
    jobs:

      - job: myrepo
        steps:
          - checkout: MyGitHubRepo

          - bash: |
              pkg_ver=$(node -p "require('./package.json').version")
              echo "##vso[task.setvariable variable=myOutputVar;isOutput=true]$pkg_ver"
            name: setvarStep
          - script: echo $(setvarStep.myOutputVar)
            name: echovar

          - bash: |
              echo "RAI_VAR_GROUP : $RAI_MY_VAR"
              echo "RAI_VAR: $RAI_VAR"
              echo "Build.Repository.Name: $BUILD_REP_NAME"
              echo "BUILD_SOURCE_VER: $BUILD_SOURCE_VER"
              echo "$TEST_FUNCTION_APP_NAME"
              echo "BUILD_SOURCE: $BUILD_SOURCE"
              echo "PACKAGE_INCREMENT_VERSION: $PACKAGE_INCREMENT_VERSION"
              echo "CACHE_VERSION_ID: $CACHE_VERSION_ID"
              echo "vmImage: $VM_IMAGE"
            env:
              RAI_VAR: '$(RAI_VAR)'
              BUILD_REP_NAME: '$(Build.Repository.Name)'
              BUILD_SOURCE_VER: '$(Build.SourceVersion)'
              TEST_FUNCTION_APP_NAME: $(TEST_FUNCTION_APP_NAME)
              RAI_MY_VAR: $(RAI_MY_VAR)
              BUILD_SOURCE: $(Build.SourceBranch)
              PACKAGE_INCREMENT_VERSION: '${{ parameters.PACKAGE_INCREMENT_VERSION }}'
              CACHE_VERSION_ID: $(CACHE_VERSION_ID)
              VM_IMAGE: $(vmImage)
            displayName: 'Print ENV'

            # To make new version available to future jobs, you must set a multi-job output 
            # variable with the number extracted from the updated package.json file
          - bash: |
              new_pkg_ver=$(node -p "require('./package.json').version")
              echo "##vso[task.setvariable variable=myOutputVar;isOutput=true]$new_pkg_ver"
            name: setvarStep1

            
          - script: echo $(setvarStep.myOutputVar)
            name: echovar1   

          - task: GitHubRelease@1
            condition: false
            inputs:
              gitHubConnection: 'release'
              repositoryName: '$(Build.Repository.Name)'
              action: 'create'
              target: '$(Build.SourceVersion)'
              tagSource: 'userSpecifiedTag'
              tagPattern: v*
              title: 'My Release'
              releaseNotesSource: 'inline'
              releaseNotesInline: 'By Azure Pipeline'
              changeLogCompareToRelease: 'lastFullRelease'
              changeLogType: 'commitBased'
              
          - bash: |
              #yarn danger ci
            env:
              DANGER_GITHUB_API_TOKEN: '$(DANGER_GITHUB_API_TOKEN)'
            displayName: 'Danger CI'


      - job: myrepoB
        dependsOn: myrepo
        condition: false
        pool:
          vmImage: 'ubuntu-16.04'
        variables:
          GIT_TAG_VERSION: $[ dependencies.myrepo.outputs['setvarStep.myOutputVar'] ]  
                                              
        steps:
        - script: echo $(GIT_TAG_VERSION)
          name: echovar

        - bash: | 
            echo $(GIT_TAG_VERSION)
            echo '$(GIT_TAG_VERSION)'
            echo "$(GIT_TAG_VERSION)"
            echo $GIT_TAG_VERSION
          name: echovar2


  - stage: Raimondo2
    dependsOn: Raimondo
    jobs:
      - job: make_release
        condition: false
        pool:
          vmImage: 'ubuntu-16.04'
                                              
        steps:
        - script: echo "CIAO - Raimondo2"
          name: echovar2

  - stage: Raimondo3
    dependsOn: Raimondo2
    jobs:
      - job: myrepoC3
        pool:
          vmImage: 'ubuntu-16.04'
                                              
        steps:
        - script: echo "CIAO - Raimondo3"
          name: echovar2


  # A) Build and code validation
  - stage: Build
    dependsOn: []
    jobs:
      # A1) Checkout, install module and build code
      - job: make_build      
        steps:
        - template: azure-templates/make-build-steps.yml
          parameters:
            make: build
            
      # A2) Analyze source code to find errors with lint
      - job: lint
        steps:
        - template: azure-templates/make-build-steps.yml
          parameters:
            make: install_dependencies

        - script: |
            yarn lint
          displayName: 'Lint'

      # A3) Validate API definition
      - job: lint_api
        steps:
        - script: |
            npx oval validate -p openapi/index.yaml
          displayName: 'Validate openAPI'

      # A4) Run Danger (skipping if not executing on a PR)
      - job: danger
        condition: 
          and(
            succeeded(), 
            and(
              eq(variables['Build.Reason'], 'PullRequest'),
              ne(variables['DANGER_GITHUB_API_TOKEN'], 'skip')
            )
          )
        steps:
          - template: azure-templates/make-build-steps.yml
            parameters:
              make: install_dependencies

          - bash: |
              yarn danger ci
            env:
              DANGER_GITHUB_API_TOKEN: '$(DANGER_GITHUB_API_TOKEN)'
            displayName: 'Danger CI'


  # B) Run unit tests if there is a push or pull request on any branch.
  - stage: Test
    dependsOn: []
    jobs:
      - job: unit_tests
        steps:
        - template: azure-templates/make-build-steps.yml
          parameters:
            make: install_dependencies

        - script: |
            yarn test:coverage
          displayName: 'Unit tests exec'

        - bash: |
            bash <(curl -s https://codecov.io/bash)
          displayName: 'Code coverage'


  # C) If required create a new version and publish the corresponding release to GitHub.
  #    - continuous deployment (automatic):
  #       - $DO_DEPLOY == true and DO_MANUAL_PUBLISH_RELEASE == true
  #       - the 'latest' tag is pushed
  #    - manual deployment:
  #       - $DO_DEPLOY == true and DO_MANUAL_PUBLISH_RELEASE == true 
  - stage: Promote_release
    dependsOn:
      - Build
      - Test
    jobs:
      - job: publish_release
        condition: 
          and(
            succeeded(),
            and(
              eq(variables['DO_DEPLOY'], true),
              or(
                and(
                  eq(variables['Build.SourceBranch'], 'refs/tags/latest'),
                  ne(variables['Build.Reason'], 'Manual')
                ),
                and(
                  eq(variables['DO_MANUAL_PUBLISH_RELEASE'], true),
                  eq(variables['Build.Reason'], 'Manual')
                )
              )
            )
          )
        steps:
          - checkout: self
            persistCredentials: true
            displayName: 'Checkout'

            # Environment variable "GITHUB_TOKEN" is required for creating GitHub release.
            # Note. The git commands are run only to set the appropriate missing configurations
            # (e.g. HEAD detached, upstream branch not set, username and email missing, etc.)! 
          - bash: |
              git checkout $GIT_SOURCE_BRANCH_NAME
              git checkout -B $GIT_SOURCE_BRANCH_NAME $GIT_SOURCE_COMMIT
              git config --global user.name "devops-pipeline"
              git config --global user.email "devops-pipeline@noreply.github.com"
              npx release-it $PACKAGE_INCREMENT_VERSION --ci
              git push -f origin HEAD:refs/tags/build_$(build.buildNumber)
            env:
              GIT_SOURCE_BRANCH_NAME: '$(Build.SourceBranchName)'
              GIT_SOURCE_COMMIT: '$(Build.SourceVersion)'
              GITHUB_TOKEN: '$(GITHUB_TOKEN)'
              PACKAGE_INCREMENT_VERSION: '${{ parameters.PACKAGE_INCREMENT_VERSION }}'
            displayName: 'release-it'


  # D) Deploy to TEST environment if the following conditions apply:
  #    - continuos deployment (automatic):
  #       - $DO_DEPLOY == true and TEST_ENABLE_DEPLOY == true
  #       - there is a push on 'master' branch 
  #    - manual deployment:
  #       - $DO_DEPLOY == true and TEST_ENABLE_DEPLOY == true
  - stage: Deploy_test
    pool:
      vmImage: 'windows-2019'
    condition: 
      and(
        succeeded(),
        and (
          eq(variables['DO_DEPLOY'], true),
          or(
            and(
              eq(variables['Build.SourceBranch'], 'refs/heads/master'),
              ne(variables['Build.Reason'], 'Manual')
            ),
            and(
              eq(variables['DO_MANUAL_TEST_DEPLOY'], true),
              eq(variables['Build.Reason'], 'Manual')
            )
          )
        )
      )    
    dependsOn:
      - Promote_release
    jobs:
      - job: '${{ parameters.TEST_DEPLOY_TYPE }}_test'
        steps:
        - template: azure-templates/deploy-steps.yml
          parameters:
            deployType: '${{ parameters.TEST_DEPLOY_TYPE }}'
            azureSubscription: '$(TEST_AZURE_SUBSCRIPTION)'
            resourceGroupName: '$(TEST_RESOURCE_GROUP_NAME)'
            appName: '$(TEST_FUNCTION_APP_NAME)'


  # E) Deploy to PRODUCTION environment if one of the following conditions apply:
  #    - continuos deployment (automatic):
  #       - $DO_DEPLOY == true and PRODUCTION_ENABLE_DEPLOY == true
  #       - the 'latest' tag is pushed 
  #    - manual deployment:
  #       - $DO_DEPLOY == true and PRODUCTION_ENABLE_DEPLOY == true
  - stage: Deploy_production
    pool:
      vmImage: 'windows-2019'
    condition: 
      and(
        succeeded(),
        and(
          eq(variables['DO_DEPLOY'], true),
          or(
            and(
              eq(variables['Build.SourceBranch'], 'refs/tags/latest'),
              ne(variables['Build.Reason'], 'Manual')
            ),
            and(
              eq(variables['DO_MANUAL_PRODUCTION_DEPLOY'], true),
              eq(variables['Build.Reason'], 'Manual')
            )
          )
        )
      )
    dependsOn:
      - Promote_release
    jobs:
      - job: '${{ parameters.PRODUCTION_DEPLOY_TYPE }}_prod'
        steps:
        - template: azure-templates/deploy-steps.yml
          parameters:
            deployType: '${{ parameters.PRODUCTION_DEPLOY_TYPE }}'
            azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
            resourceGroupName: '$(PRODUCTION_RESOURCE_GROUP_NAME)'
            appName: '$(PRODUCTION_FUNCTION_APP_NAME)'

          # Environment variable "GITHUB_TOKEN" is required for creating GitHub release.
          # Note. The git commands are run only to set the appropriate missing configurations
          # (e.g. HEAD detached, upstream branch not set, username and email missing, etc.)! 
        - bash: |
            git push -f origin HEAD:refs/tags/deploy_$(build.buildNumber)
          env:
            GITHUB_TOKEN: '$(GITHUB_TOKEN)'
          displayName: 'create deploy tag'