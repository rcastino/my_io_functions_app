# Azure DevOps pipeline to build, check source codes, run tests, and deploy.
#
# To make Danger JS run on a pull request you need to add the following pipeline 
# variable and set it with a GitHub access token (scope public_repo); otherwise 
# set its value to 'skip' without marking it secret: 
# - DANGER_GITHUB_API_TOKEN
#
# To enable the deployment in any environment you need to configure the following 
# variable otherwise all the deployment jobs will be always skipped:
# - DO_DEPLOY = true
# in case of a manual run, you also need to configure the following additional 
# variables based on the environment to update:
# - STAGING_ENABLE_MANUAL_DEPLOY = true
# - PRODUCTION_ENABLE_MANUAL_DEPLOY = true
#
# The following variables are also used when running the deployment jobs:
# - STAGING_DEPLOY_MODE: 'deploy_standard' || 'deploy_to_slots'
# - STAGING_AZURE_SUBSCRIPTION
# - STAGING_RESOURCE_GROUP_NAME
# - STAGING_FUNCTION_APP_NAME
# 
# - PRODUCTION_DEPLOY_MODE: 'deploy_standard' || 'deploy_to_slots'
# - PRODUCTION_AZURE_SUBSCRIPTION
# - PRODUCTION_RESOURCE_GROUP_NAME
# - PRODUCTION_FUNCTION_APP_NAME
#

variables:
  NODE_VERSION: '10.14.1'
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

parameters:
- name: 'NODE_V'
  displayName: 'Enable deploy in test environment'
  type: string
  values: ['10.14.1']

- name: 'TEST_ENABLE_DEPLOY'
  displayName: 'Enable deploy in test environment'
  type: boolean
  default: false

- name: 'TEST_DEPLOY_MODE'
  displayName: 'Deploy mode in test:'
  type: string
  default: deploy_to_test_slot
  values:
    - deploy_to_test_slot 

- name: 'PRODUCTION_ENABLE_DEPLOY'
  displayName: 'Enable deploy in production environment'
  type: boolean
  default: true

- name: 'PRODUCTION_DEPLOY_MODE'
  displayName: 'Deploy mode in production:'
  type: string
  default: deploy_to_staging_slot
  values:
    - deploy_to_production_slot
    - deploy_to_staging_slot
    - deploy_to_staging_slot_and_swap


# This pipeline can be manually run or is automatically triggered whenever one 
# of the following conditions is true:
# - a push is made to any branch in the repository (not only 'master')
# - a pull request is created
# - a tag named 'latest' is pushed
# Note. In the last case, the tag can be (re-)created using the Git CLI, e.g.:
#    git push -f origin <abfb967>:refs/tags/latest
trigger:
  branches:
    include:
      - '*'
      - refs/tags/latest

# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are deploying on Azure functions on Windows
# runtime, the pipeline is currently configured to use a Windows hosted image.
pool:
  vmImage: 'windows-2019'

stages:

  - stage: Raimondo
    dependsOn: []
    jobs:
      - job: danger
        pool:
          vmImage: 'windows-2019'      
        steps:
          - template: azure-templates/make-build-steps.yml
            parameters:
              make: install_dependencies

          - bash: |
              yarn danger ci
            env:
              DANGER_GITHUB_API_TOKEN: '$(DANGER_GITHUB_API_TOKEN)'
            displayName: 'Danger CI'


  # A) Build and code validation
  - stage: Build
    dependsOn: []
    jobs:
      # A1) Checkout, install module and build code
      - job: make_build      
        steps:
        - template: azure-templates/make-build-steps.yml
          parameters:
            make: build
            
      # A2) Analyze source code to find errors with lint
      - job: lint
        pool:
          vmImage: 'ubuntu-latest'      
        steps:
        - template: azure-templates/make-build-steps.yml
          parameters:
            make: install_dependencies

        - script: |
            yarn lint
          displayName: 'Lint'

      # A3) Validate API definition
      - job: lint_api
        pool:
          vmImage: 'ubuntu-latest'      
        steps:
        - script: |
            npx oval validate -p openapi/index.yaml
          displayName: 'Validate openAPI'

      # A4) Run Danger (skipping if not executing on a PR)
      - job: danger
        pool:
          vmImage: 'ubuntu-latest'
        condition: 
          and(
            succeeded(), 
            and(
              eq(variables['Build.Reason'], 'PullRequest'),
              ne(variables['DANGER_GITHUB_API_TOKEN'], 'skip')
            )
          )
        steps:
          - template: azure-templates/make-build-steps.yml
            parameters:
              make: install_dependencies

          - bash: |
              yarn danger ci
            env:
              DANGER_GITHUB_API_TOKEN: '$(DANGER_GITHUB_API_TOKEN)'
            displayName: 'Danger CI'


  # B) Run unit tests if there is a push or pull request on any branch.
  - stage: Test
    pool:
      vmImage: 'ubuntu-latest'  
    dependsOn: []
    jobs:
      - job: unit_tests
        steps:
        - template: azure-templates/make-build-steps.yml
          parameters:
            make: install_dependencies

        - script: |
            yarn test:coverage
          displayName: 'Unit tests exec'

        - bash: |
            bash <(curl -s https://codecov.io/bash)
          displayName: 'Code coverage'


  # C) Deploy to STAGE environment if the following conditions apply:
  #    - continuos deployment (automatic):
  #       - $DO_DEPLOY == true and
  #       - there is a push on 'master' branch 
  #    - manual deployment:
  #       - $DO_DEPLOY == true and
  #       - $STAGING_ENABLE_MANUAL_DEPLOY == true
  # The following alternative deployment modes are supported:
  #   a) $STAGING_DEPLOY_MODE == 'deploy_standard': deploy to 'prodution' slot
  #   b) $STAGING_DEPLOY_MODE == 'deploy_to_slots': deploy to 'staging' slot and
  #      then swap 'staging' slot with 'production' slot
  - stage: Deploy_staging
    condition: false
    dependsOn: []
    jobs:
      # Option 1: deploy directly to 'production' slot
      - job: deploy_standard
        condition: and(succeeded(), eq(variables['STAGING_DEPLOY_MODE'], 'deploy_standard'))
        steps:
        - template: azure-templates/deploy-steps.yml
          parameters:
            deployType: 'deployToProductionSlot'
            azureSubscription: '$(STAGING_AZURE_SUBSCRIPTION)'
            resourceGroupName: '$(STAGING_RESOURCE_GROUP_NAME)'
            appName: '$(STAGING_FUNCTION_APP_NAME)'

      # Option 2: deploy to staging slot and then swap with 'production' slot
      - job: deploy_to_slots
        condition: and(succeeded(), eq(variables['STAGING_DEPLOY_MODE'], 'deploy_to_slots'))
        steps:
        - template: azure-templates/deploy-steps.yml
          parameters:
            deployType: 'deployToStagingSlotAndSwap'
            azureSubscription: '$(STAGING_AZURE_SUBSCRIPTION)'
            resourceGroupName: '$(STAGING_RESOURCE_GROUP_NAME)'
            appName: '$(STAGING_FUNCTION_APP_NAME)'


  # D) Deploy to PRODUCTION environment if one of the following conditions apply:
  #    - continuos deployment (automatic):
  #       - $DO_DEPLOY == true and PRODUCTION_ENABLE_DEPLOY == true
  #       - the 'latest' tag is pushed 
  #    - manual deployment:
  #       - $DO_DEPLOY == true and PRODUCTION_ENABLE_DEPLOY == true
  #       - $PRODUCTION_ENABLE_MANUAL_DEPLOY == true
  # The following alternative deployment modes are supported:
  #   a) PRODUCTION_DEPLOY_MODE == 'deploy_to_production_slot': deploy directly 
  #       to 'prodution' slot
  #   b) PRODUCTION_DEPLOY_MODE == 'deploy_to_staging_slot': deploy to 'staging'
  #       slot (if auto-swap is on, the slot is swapped with 'production' slot)
  #   c) PRODUCTION_DEPLOY_MODE == 'deploy_to_staging_slot_and_swap': deploy to 
  #       'staging' slot and then explicitly swap 'staging' slot with 'production' slot
  - ${{ if eq(parameters.PRODUCTION_ENABLE_DEPLOY, true) }}:
    - stage: Deploy_production
      condition: 
        and(
          succeeded(),
          and (
            eq(variables['DO_DEPLOY'], true),
            or(
              eq(variables['Build.SourceBranch'], 'refs/tags/latest'),
              eq(variables['Build.Reason'], 'Manual')
            )
          )
        )
      dependsOn: []
      jobs:
        # Option 1: deploy directly to 'production' slot
        - ${{ if eq(parameters.PRODUCTION_DEPLOY_MODE, 'deploy_to_production_slot') }}:
          - job: deploy_to_production_slot
            steps:
            - template: azure-templates/deploy-steps.yml
              parameters:
                deployType: 'deployToProductionSlot'
                azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
                resourceGroupName: '$(PRODUCTION_RESOURCE_GROUP_NAME)'
                appName: '$(PRODUCTION_FUNCTION_APP_NAME)'

        # Option 2: deploy to 'staging' slot only
        - ${{ if eq(parameters.PRODUCTION_DEPLOY_MODE, 'deploy_to_staging_slot') }}:
          - job: deploy_to_staging_slot
            steps:
            - template: azure-templates/deploy-steps.yml
              parameters:
                deployType: 'deployToStagingSlot'
                azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
                resourceGroupName: '$(PRODUCTION_RESOURCE_GROUP_NAME)'
                appName: '$(PRODUCTION_FUNCTION_APP_NAME)'

        # Option 3: deploy to 'staging' slot and then swap with 'production' slot
        - ${{ if eq(parameters.PRODUCTION_DEPLOY_MODE, 'deploy_to_staging_slot_and_swap') }}:
          - job: deploy_to_staging_slot_and_swap
            steps:
            - template: azure-templates/deploy-steps.yml
              parameters:
                deployType: 'deployToStagingSlotAndSwap'
                azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
                resourceGroupName: '$(PRODUCTION_RESOURCE_GROUP_NAME)'
                appName: '$(PRODUCTION_FUNCTION_APP_NAME)'
